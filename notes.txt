11.02.2025
Data structures are a specific way of organizing data in a specialized format on a computer so that the information can be organized, processed, stored, and retrieved quickly and effectively.
data structures:linear, hash,graph...
Serialization is the process of converting the state of an object into a form that can be persisted or transported.
Deserialization is the reverse process of serialization. It involves taking a byte stream and converting it back into an object. 

----------------

http
client - server
Request -Response
IP/ICP
server also can be a client

-------------------

html http=Request line---
                        -
   request headers      -request
                        -message
                        -Header
000000000000000000000000000000000= a blank line separates header and body
bookid=dfasg2341234525     =HTTP client library-what methods does your library provides?
                            server library

------------------

Methods:GET,POST, PUT, DELETE, OPTIONS,...
Status Codes: 2xx-success; 3xx-redirect;4xx-client errors; 5xx-server errors(can be some error from client side, like wrong input or format)
Status code is when you receiving data; status code is coming from the server.

--------------------------------

HTTP/1.1.200 -------------->status line
"different data"----------->Headers
<html>-\
<body>---------------->body
.....-/

----------------------------------

We dont use port numbers in IPV6
Accept- is command that shows what format it accepts, but servers dont need it.
----------------------------------
Methods Used in the Server and Client:
GET → Retrieve data from the server
POST → Send new data to the server
PUT → Update existing data on the server
DELETE → Remove data from the server
OPTIONS → Check which HTTP methods are allowed
----------------------------------

import requests

# Server URL
SERVER_URL = "https://jsonplaceholder.typicode.com"

# Making a GET request
headers = {
    "Content-Type": "application/json",  # Tell the server we're sending JSON
    "Accept": "application/json",        # Request JSON response
    "User-Agent": "MyCustomClient/1.0"   # Identifies the client making the request
}
response = requests.get(SERVER_URL, headers=headers)

print(f"GET Response: {response.status_code}\n{response.text}")
print(f"GET Response: {response.status_code}")
print("Response Headers:", response.headers)
print("Response Body:", response.text)
# Making a POST request with data
data = {"bookid": "dfasg2341234525"}
response = requests.post(SERVER_URL, json=data)
print(f"POST Response: {response.status_code}\n{response.text}")

# Making a PUT request
update_data = {"update": "new_value"}
response = requests.put(SERVER_URL, json=update_data)
print(f"PUT Response: {response.status_code}\n{response.text}")

# Making a DELETE request
response = requests.delete(SERVER_URL)
print(f"DELETE Response: {response.status_code}\n{response.text}")

# Making an OPTIONS request
response = requests.options(SERVER_URL)
print(f"OPTIONS Response: {response.status_code}\nHeaders: {response.headers}")

-------------------------------------------------------------------------

25.02

What are the main parts of a URL?

Scheme or Protocol. 
Subdomain. 
Domain.
Top-Level Domain. 
Subdirectory.
Portnumber.

import csv
import json
from http.server import BaseHTTPRequestHandler, HTTPServer
from urllib.parse import urlparse, parse_qs

# Определение заголовков CSV
FIELDNAMES = [
    "part_number",  # Артикул
    "name",         # Наименование
    "field3",
    "field4",
    "field5",
    "field6",
    "field7",
    "field8",
    "price",
    "brand",
    "field11"
]

# Читаем CSV в память
def read_csv(filename="LE.txt"):
    spare_parts = []
    with open(filename, "r", encoding="latin-1") as file:
        reader = csv.DictReader(file, fieldnames=FIELDNAMES, delimiter="\t", skipinitialspace=True)
        for row in reader:
            row["name"] = row["name"].strip()  # Убираем лишние пробелы
            row["price"] = float(row["price"].replace(",", ".")) if row["price"].replace(",", "").isdigit() else 0.0
            spare_parts.append(row)
    return spare_parts


# Загружаем данные при старте сервера
spare_parts_data = read_csv()


class SimpleHTTPRequestHandler(BaseHTTPRequestHandler):
    def _send_json(self, data, status_code=200):
        self.send_response(status_code)
        self.send_header("Content-type", "application/json")
        self.end_headers()
        self.wfile.write(json.dumps(data, ensure_ascii=False, indent=2).encode())

    def _filter_data(self, params):
        filtered_data = spare_parts_data

        # Фильтр по имени
        if "name" in params:
            name = params["name"][0].lower()
            filtered_data = [part for part in filtered_data if name in part["name"].lower()]

        # Фильтр по артикулу
        if "sn" in params:
            serial_number = params["sn"][0]
            filtered_data = [part for part in filtered_data if part["part_number"] == serial_number]

        return filtered_data

    def _paginate_data(self, data, params):
        # Страница по умолчанию — 1, на странице 30 элементов
        page = int(params.get("page", [1])[0])
        per_page = 30
        start_index = (page - 1) * per_page
        end_index = start_index + per_page
        return data[start_index:end_index]

    def _sort_data(self, data, params):
        if "sort" in params:
            sort_by = params["sort"][0]
            reverse = False
            if sort_by.startswith("-"):
                reverse = True
                sort_by = sort_by[1:]

            if sort_by in FIELDNAMES:
                data = sorted(data, key=lambda x: x.get(sort_by, ""), reverse=reverse)

        return data

    def do_GET(self):
        url_components = urlparse(self.path)
        params = parse_qs(url_components.query)

        # Фильтрация
        filtered_data = self._filter_data(params)

        # Сортировка
        sorted_data = self._sort_data(filtered_data, params)

        # Пагинация
        paginated_data = self._paginate_data(sorted_data, params)

        self._send_json(paginated_data)

    def do_OPTIONS(self):
        self.send_response(204)
        self.send_header("Allow", "GET, OPTIONS")
        self.end_headers()


def run(server_class=HTTPServer, handler_class=SimpleHTTPRequestHandler, port=8080):
    server_address = ("", port)
    httpd = server_class(server_address, handler_class)
    print(f"Starting server on port {port}...")
    httpd.serve_forever()


if __name__ == "__main__":
    run()


------------------------------------------------------------------------------------

29.04


XSS Cross site scripting
    Unsecured inputs in forms. public forms
    reviews, comments, BIO ,username <script> clean html in asp.net

SQL Injection
'Select * FROM products WHERE name == '%${req.query.search}%'"


db.execute(
  'Select * FROM products WHERE name = '%?%',
  [req/query/search]
)




 
Brute force, Both passwords and directory traversing
Rate limiting plugin/middleware
IP based rate limiting, 10000 login requests per 1 minutes
Misconfigurations
CORS





